from tquakes import *
# ##################################################
# ARGUMENTS
# ##################################################
quakeid=argv[1]
print "\tRunning GOTIC2 for quake '%s'..."%quakeid

# ##################################################
# CONFIGURATION
# ##################################################
conf=loadConf("configuration")
gotic2="./gotic2"

# ##################################################
# LOAD STATION INFORMATION
# ##################################################
station=loadConf(".stationrc")

# ##################################################
# RUN ETERNA
# ##################################################
# GENERATE ETERNA.INI FILES PER COMPONENT

lquakeid=quakeid.lower()
for component in COMPONENTS:

    if component==9:component=5
    gcomp=GOTIC2[str(component)]
    print "\t\tRunning component %s..."%gcomp
    basename="%s%s"%(quakeid,gcomp)

    cmd="%s < %s.ini > %s.pre &> %s.log"%(gotic2,basename,basename,basename)
    print cmd
    System(cmd)

    for gtype in GOTIC2_TYPES.keys():
        gt=GOTIC2_TYPES[gtype]
        basegotic2=basename+gtype
        system("cp %s.pre %s.pre"%(basename,basegotic2))
        cmd="%s < %s.inp &> %s.log"%(gotic2,basegotic2,basegotic2)
        print cmd
        System(cmd)
        cmd="bash out2plain.sh %s.out > %s.plain"%(basegotic2,basegotic2)
        print cmd
        #system(cmd)
        #break
    #break

exit(0)

# GENERATE DATAFILES
print "\tGenerating plain data file..."
ic=0
for component in COMPONENTS:
    fileplain="%s%d.plain"%(lquakeid,component)
    try:
        datacomp=numpy.loadtxt(fileplain)
    except:
        System("touch .fail")
        exit(1)

    System("rm "+fileplain)
    if ic:data=numpy.column_stack((data,datacomp[:,2]))
    else:data=datacomp[:,2]
    ic+=1

# CREATE ADDITIONAL COLUMNS

# MAGNITUDE OF THE HORIZONTAL STRAIN
hsm=numpy.sqrt(data[:,4]**2+data[:,5]**2)

# ANGLE OF THE HORIZONTAL STRAIN (0 IS EAST, 90 NORTH, 180 WEST)
hst=numpy.arctan2(data[:,4],data[:,5])*RAD
data=numpy.column_stack((data,hsm,hst))

# CALCULATE DATE
times=[]
for i in xrange(len(datacomp[:,0])):
    timestr="%d %06d"%(int(datacomp[i,0]),int(datacomp[i,1]))
    timedate=datetime.datetime.strptime(timestr,"%Y%m%d %H%M%S")
    timejd=date2jd(timedate)
    times+=[timejd]

data=numpy.column_stack((times,data))
numpy.savetxt("%s.data"%(quakeid),data)

print "\tQuake done."
